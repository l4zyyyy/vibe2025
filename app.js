const express = require('express');
const bodyParser = require('body-parser');
const sqlite3 = require('sqlite3').verbose();
const TelegramBot = require('node-telegram-bot-api');
const basicAuth = require('basic-auth');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const PORT = 3000;
const TELEGRAM_BOT_TOKEN = '8173296673:AAE5IIUsNXuQIBYZ3rSVbltrT2q2WrWPNxI';
const ADMIN_CREDENTIALS = { username: 'admin', password: '12345' };

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, {polling: true});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è_–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database('./todos.db', (err) => {
    if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
    } else {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite');
        db.run(`CREATE TABLE IF NOT EXISTS todos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            task TEXT NOT NULL,
            completed BOOLEAN DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )`);
    }
});

// Middleware –¥–ª—è –±–∞–∑–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const auth = (req, res, next) => {
    const user = basicAuth(req);
    if (!user || user.name !== ADMIN_CREDENTIALS.username || user.pass !== ADMIN_CREDENTIALS.password) {
        res.set('WWW-Authenticate', 'Basic realm=Authorization Required');
        return res.status(401).send('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }
    next();
};

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(express.static('public'));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list –≤ Telegram
bot.onText(/\/list/, (msg) => {
    const chatId = msg.chat.id;
    
    db.all('SELECT * FROM todos ORDER BY created_at DESC', [], (err, rows) => {
        if (err) {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á');
            return;
        }
        
        if (rows.length === 0) {
            bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç');
            return;
        }
        
        let message = 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n\n';
        rows.forEach((task, index) => {
            const status = task.completed ? '‚úÖ' : 'üü°';
            message += `${index + 1}. ${status} ${task.task}\n`;
        });
        
        bot.sendMessage(chatId, message);
    });
});

// –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã API
// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
app.get('/api/todos', auth, (req, res) => {
    db.all('SELECT * FROM todos ORDER BY created_at DESC', [], (err, rows) => {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }
        res.json(rows);
    });
});

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
app.post('/api/todos', auth, (req, res) => {
    const { task } = req.body;
    if (!task) {
        return res.status(400).json({ error: 'Task is required' });
    }

    db.run('INSERT INTO todos (task) VALUES (?)', [task], function(err) {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }

        res.json({
            id: this.lastID,
            task,
            completed: 0
        });
    });
});

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
app.put('/api/todos/:id', auth, (req, res) => {
    const { id } = req.params;
    const { completed } = req.body;

    db.run('UPDATE todos SET completed = ? WHERE id = ?', [completed ? 1 : 0, id], function(err) {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }
        res.json({ success: true });
    });
});

// –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
app.delete('/api/todos/:id', auth, (req, res) => {
    const { id } = req.params;

    db.run('DELETE FROM todos WHERE id = ?', [id], function(err) {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }
        res.json({ success: true });
    });
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π HTML —Ñ–∞–π–ª (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
app.get('/', auth, (req, res) => {
    res.sendFile(__dirname + '/public/index.html');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    console.log(`–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–≥–∏–Ω: ${ADMIN_CREDENTIALS.username} –∏ –ø–∞—Ä–æ–ª—å: ${ADMIN_CREDENTIALS.password}`);
});