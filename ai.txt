Вот промпт в chatgpt 4 от open ai

Привет, у меня есть задание от преподавателя. Мне нужно добавить фичу: удаление элементов. у меня есть файлы: .gitignore: node_modules  db.sql: CREATE DATABASE IF NOT EXISTS todolist; USE todolist;  CREATE TABLE IF NOT EXISTS items (     id INT AUTO_INCREMENT PRIMARY KEY,     text VARCHAR(255) NOT NULL );  index.html: <!DOCTYPE html> <html lang="en"> <head>     <meta charset="UTF-8">     <meta name="viewport" content="width=device-width, initial-scale=1.0">     <title>To-Do List</title>     <style>         body {             font-family: Arial, sans-serif;         }         #todoList {             border-collapse: collapse;             width: 70%;             margin: 0 auto;         }         #todoList th, #todoList td {             border: 1px solid #ddd;             padding: 8px;             text-align: left;         }         #todoList th {             background-color: #f0f0f0;         }         #todoList th:first-child, #todoList th:last-child {             width: 5%;         }         #todoList th:nth-child(2) {             width: 90%;         }         .add-form {             margin-top: 20px;             width: 70%;             margin: 20px auto;         }         .add-form input[type="text"] {             padding: 8px;             width: 70%;         }         .add-form button {             padding: 8px;             width: 20%;         }     </style> </head> <body>  <h2 style="text-align: center;">To-Do List</h2>  <table id="todoList">     <thead>         <tr>             <th>Number</th>             <th>Text</th>             <th>Action</th>         </tr>     </thead>     <tbody id="listBody">         {{rows}}     </tbody> </table>  <div class="add-form">     <input type="text" id="newItem" placeholder="Enter new item">     <button onclick="addItem()">Add</button> </div>  <script>     let items = [];     let nextId = 1;      function renderList() {         const listBody = document.getElementById('listBody');         listBody.innerHTML = '';          items.forEach((item, index) => {             const row = document.createElement('tr');             row.innerHTML = `                 <td>${index + 1}</td>                 <td>${item.text}</td>                 <td><button onclick="removeItem(${index})">Remove</button></td>             `;             listBody.appendChild(row);         });     }      function addItem() {         const newItemInput = document.getElementById('newItem');         const newItemText = newItemInput.value.trim();          if (newItemText) {             items.push({ id: nextId++, text: newItemText });             newItemInput.value = '';             renderList();         }     }      function removeItem(index) {         items.splice(index, 1);         renderList();     } </script>  </body> </html>  index.js: const http = require('http'); const fs = require('fs'); const path = require('path'); const mysql = require('mysql2/promise');  const PORT = 3000;  // Database connection settings const dbConfig = {     host: 'localhost',     user: 'root',     password: '',     database: 'todolist',   };     async function retrieveListItems() {     try {       // Create a connection to the database       const connection = await mysql.createConnection(dbConfig);              // Query to select all items from the database       const query = 'SELECT id, text FROM items';              // Execute the query       const [rows] = await connection.execute(query);              // Close the connection       await connection.end();              // Return the retrieved items as a JSON array       return rows;     } catch (error) {       console.error('Error retrieving list items:', error);       throw error; // Re-throw the error     }   }  // Stub function for generating HTML rows async function getHtmlRows() {     // Example data - replace with actual DB data later     /*     const todoItems = [         { id: 1, text: 'First todo item' },         { id: 2, text: 'Second todo item' }     ];*/      const todoItems = await retrieveListItems();      // Generate HTML for each item     return todoItems.map(item => `         <tr>             <td>${item.id}</td>             <td>${item.text}</td>             <td><button class="delete-btn">×</button></td>         </tr>     `).join(''); }  // Modified request handler with template replacement async function handleRequest(req, res) {     if (req.url === '/') {         try {             const html = await fs.promises.readFile(                 path.join(__dirname, 'index.html'),                  'utf8'             );                          // Replace template placeholder with actual content             const processedHtml = html.replace('{{rows}}', await getHtmlRows());                          res.writeHead(200, { 'Content-Type': 'text/html' });             res.end(processedHtml);         } catch (err) {             console.error(err);             res.writeHead(500, { 'Content-Type': 'text/plain' });             res.end('Error loading index.html');         }     } else {         res.writeHead(404, { 'Content-Type': 'text/plain' });         res.end('Route not found');     } }  // Create and start server const server = http.createServer(handleRequest); server.listen(PORT, () => console.log(`Server running on port ${PORT}`));  package-lock.json: {   "name": "lab1",   "lockfileVersion": 3,   "requires": true,   "packages": {     "": {       "dependencies": {         "mysql2": "^3.14.0"       }     },     "node_modules/aws-ssl-profiles": {       "version": "1.1.2",       "resolved": "https://registry.npmjs.org/aws-ssl-profiles/-/aws-ssl-profiles-1.1.2.tgz",       "integrity": "sha512-NZKeq9AfyQvEeNlN0zSYAaWrmBffJh3IELMZfRpJVWgrpEbtEpnjvzqBPf+mxoI287JohRDoa+/nsfqqiZmF6g==",       "engines": {         "node": ">= 6.0.0"       }     },     "node_modules/denque": {       "version": "2.1.0",       "resolved": "https://registry.npmjs.org/denque/-/denque-2.1.0.tgz",       "integrity": "sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==",       "engines": {         "node": ">=0.10"       }     },     "node_modules/generate-function": {       "version": "2.3.1",       "resolved": "https://registry.npmjs.org/generate-function/-/generate-function-2.3.1.tgz",       "integrity": "sha512-eeB5GfMNeevm/GRYq20ShmsaGcmI81kIX2K9XQx5miC8KdHaC6Jm0qQ8ZNeGOi7wYB8OsdxKs+Y2oVuTFuVwKQ==",       "dependencies": {         "is-property": "^1.0.2"       }     },     "node_modules/iconv-lite": {       "version": "0.6.3",       "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",       "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",       "dependencies": {         "safer-buffer": ">= 2.1.2 < 3.0.0"       },       "engines": {         "node": ">=0.10.0"       }     },     "node_modules/is-property": {       "version": "1.0.2",       "resolved": "https://registry.npmjs.org/is-property/-/is-property-1.0.2.tgz",       "integrity": "sha512-Ks/IoX00TtClbGQr4TWXemAnktAQvYB7HzcCxDGqEZU6oCmb2INHuOoKxbtR+HFkmYWBKv/dOZtGRiAjDhj92g=="     },     "node_modules/long": {       "version": "5.3.1",       "resolved": "https://registry.npmjs.org/long/-/long-5.3.1.tgz",       "integrity": "sha512-ka87Jz3gcx/I7Hal94xaN2tZEOPoUOEVftkQqZx2EeQRN7LGdfLlI3FvZ+7WDplm+vK2Urx9ULrvSowtdCieng=="     },     "node_modules/lru-cache": {       "version": "7.18.3",       "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-7.18.3.tgz",       "integrity": "sha512-jumlc0BIUrS3qJGgIkWZsyfAM7NCWiBcCDhnd+3NNM5KbBmLTgHVfWBcg6W+rLUsIpzpERPsvwUP7CckAQSOoA==",       "engines": {         "node": ">=12"       }     },     "node_modules/lru.min": {       "version": "1.1.2",       "resolved": "https://registry.npmjs.org/lru.min/-/lru.min-1.1.2.tgz",       "integrity": "sha512-Nv9KddBcQSlQopmBHXSsZVY5xsdlZkdH/Iey0BlcBYggMd4two7cZnKOK9vmy3nY0O5RGH99z1PCeTpPqszUYg==",       "engines": {         "bun": ">=1.0.0",         "deno": ">=1.30.0",         "node": ">=8.0.0"       },       "funding": {         "type": "github",         "url": "https://github.com/sponsors/wellwelwel"       }     },     "node_modules/mysql2": {       "version": "3.14.0",       "resolved": "https://registry.npmjs.org/mysql2/-/mysql2-3.14.0.tgz",       "integrity": "sha512-8eMhmG6gt/hRkU1G+8KlGOdQi2w+CgtNoD1ksXZq9gQfkfDsX4LHaBwTe1SY0Imx//t2iZA03DFnyYKPinxSRw==",       "dependencies": {         "aws-ssl-profiles": "^1.1.1",         "denque": "^2.1.0",         "generate-function": "^2.3.1",         "iconv-lite": "^0.6.3",         "long": "^5.2.1",         "lru.min": "^1.0.0",         "named-placeholders": "^1.1.3",         "seq-queue": "^0.0.5",         "sqlstring": "^2.3.2"       },       "engines": {         "node": ">= 8.0"       }     },     "node_modules/named-placeholders": {       "version": "1.1.3",       "resolved": "https://registry.npmjs.org/named-placeholders/-/named-placeholders-1.1.3.tgz",       "integrity": "sha512-eLoBxg6wE/rZkJPhU/xRX1WTpkFEwDJEN96oxFrTsqBdbT5ec295Q+CoHrL9IT0DipqKhmGcaZmwOt8OON5x1w==",       "dependencies": {         "lru-cache": "^7.14.1"       },       "engines": {         "node": ">=12.0.0"       }     },     "node_modules/safer-buffer": {       "version": "2.1.2",       "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",       "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="     },     "node_modules/seq-queue": {       "version": "0.0.5",       "resolved": "https://registry.npmjs.org/seq-queue/-/seq-queue-0.0.5.tgz",       "integrity": "sha512-hr3Wtp/GZIc/6DAGPDcV4/9WoZhjrkXsi5B/07QgX8tsdc6ilr7BFM6PM6rbdAX1kFSDYeZGLipIZZKyQP0O5Q=="     },     "node_modules/sqlstring": {       "version": "2.3.3",       "resolved": "https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.3.tgz",       "integrity": "sha512-qC9iz2FlN7DQl3+wjwn3802RTyjCx7sDvfQEXchwa6CWOx07/WVfh91gBmQ9fahw8snwGEWU3xGzOt4tFyHLxg==",       "engines": {         "node": ">= 0.6"       }     }   } }  package.json: {   "dependencies": {     "mysql2": "^3.14.0"   } }  Расскажи что мне сделать, что добавить. Если что mysql у меня не установлен. Но у меня есть npm и node.js. А пишу я все в VsCode. Скинь мне полностью код тех файлов, которые ты меняешь     